#!/usr/bin/env python3
# Dependencies
# fuzzywuzzy
# pip install fuzzywuzzy[speedup]

from libqtile.command.client import InteractiveCommandClient
import configparser
from fuzzywuzzy import fuzz
import os
import sys
import subprocess
import argparse


# Qtile manager
c = InteractiveCommandClient()


# Minimize windows
def minimize():
    if c.window.info()["minimized"] is False:
        c.window.toggle_minimize()
        c.group.next_window()
    else:
        c.window.toggle_minimize()


# Get all icons
def get_all_icons() -> list[str]:
    icons = []
    config = configparser.ConfigParser(interpolation=None)

    for root, _, files in os.walk("/usr/share/applications"):
        for file in files:
            if not file.endswith(".desktop"):
                continue

            try:
                config.read(os.path.join(root, file))
                icon = config["Desktop Entry"]["Icon"]
            except KeyError:
                continue
            except configparser.DuplicateOptionError:
                continue
            icons.append(icon)

    return icons


# Get corresponding icon depending on the wm_class
def get_corresponding_icon(name: str, icons: list) -> str:
    max_ratio = float("-inf")
    icon_guessed = ""

    for icon in icons:
        ratio = fuzz.ratio(name, icon)

        if ratio > max_ratio:
            icon_guessed = icon
            max_ratio = ratio

    return icon_guessed


# Get wm_class for each window
def get_minimized_windows(icons: list) -> list[dict]:
    minimized_windows = []

    for window in c.windows():
        item = {}
        if window["minimized"] is True:
            item["id"] = window["id"]
            item["wm_class"] = window["wm_class"][0]
            item["name"] = window["name"]
            item["icon"] = get_corresponding_icon(item["wm_class"], icons)
            minimized_windows.append(item)

    return minimized_windows


# Build rofi menu options
def build_menu_options(minimized_windows: list[dict], format: str) -> str:
    menu_options = ""
    menu_item = ""

    if format == "id":
        menu_item = r'{item["id"]}\\0icon\\x1f{item["icon"]}\n'
    elif format == "name":
        menu_item = r'{item["name"]}\\0icon\\x1f{item["icon"]}\n'
    else:
        menu_item = r'{item["id"]} {item["name"]}\\0icon\\x1f{item["icon"]}\n'

    for item in minimized_windows:
        menu_options += eval(f"f'{menu_item}'")

    return menu_options.rstrip()


# Main function
def main():
    parser = argparse.ArgumentParser(description="Minimize/Unminimized windows in Qtile")
    group_1 = parser.add_mutually_exclusive_group(required=True)
    group_1.add_argument(
        "-m", "--minimize",
        action="store_true",
        help="Minimize current window"
    )
    group_1.add_argument(
        "-u", "--unminimize",
        const="both",
        nargs='?',
        type=str,
        choices=("name", "id", "both"),
        metavar="id, name, both",
        help="Open unminimized windows menu (Default: both)"
    )

    args = parser.parse_args()

    if args.minimize:
        minimize()

    elif args.unminimize:
        icons = get_all_icons()
        minimized_windows = get_minimized_windows(icons)
        rofi_menu_options = build_menu_options(minimized_windows, args.unminimize)
        command = f"echo -en '{rofi_menu_options}'| rofi -dmenu -multi-select -format i"

        try:
            result = subprocess.check_output(
                command,
                shell=True,
                universal_newlines=True
            ).rstrip().split("\n")
        except Exception:
            sys.exit()

        for ind in result:
            c.window[minimized_windows[int(ind)]["id"]].toggle_minimize()


if __name__ == "__main__":
    main()
